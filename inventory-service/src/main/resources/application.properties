spring.datasource.url=jdbc:postgresql://localhost:5432/linktic_inventory
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

server.port=${SERVER_PORT:8086}

# Comunicaci√≥n entre microservicios
products.base-url=${PRODUCTS_BASE_URL:http://localhost:8081}
api.key=${INTERSERVICE_API_KEY:change-me}
http.client.timeout-ms=1500
http.client.max-retries=2
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true

# Resilience4j configuration for calls to products-service (instance name: productsClient)
resilience4j.circuitbreaker.instances.productsClient.register-health-indicator=true
resilience4j.circuitbreaker.instances.productsClient.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.productsClient.sliding-window-size=10
resilience4j.circuitbreaker.instances.productsClient.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.productsClient.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.productsClient.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.productsClient.permitted-number-of-calls-in-half-open-state=3

# Retry policy with exponential backoff
resilience4j.retry.instances.productsClient.max-attempts=${HTTP_CLIENT_MAX_RETRIES:3}
resilience4j.retry.instances.productsClient.wait-duration=500ms
resilience4j.retry.instances.productsClient.enable-exponential-backoff=true
resilience4j.retry.instances.productsClient.exponential-backoff-multiplier=2.0

