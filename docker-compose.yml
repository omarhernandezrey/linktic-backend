version: "3.9"
services:
  postgres-products:
    image: postgres:16
    environment:
      POSTGRES_DB: ${PRODUCTS_DB_NAME:-products}
      POSTGRES_USER: ${PRODUCTS_DB_USER}
      POSTGRES_PASSWORD: ${PRODUCTS_DB_PASS}
    ports:
      - "${PRODUCTS_DB_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 3s
      retries: 20

  postgres-inventory:
    image: postgres:16
    environment:
      POSTGRES_DB: ${INVENTORY_DB_NAME:-inventory}
      POSTGRES_USER: ${INVENTORY_DB_USER}
      POSTGRES_PASSWORD: ${INVENTORY_DB_PASS}
    ports:
      - "${INVENTORY_DB_PORT:-5434}:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 3s
      retries: 20

  products-service:
    build: ./products-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      API_KEY_INTERNAL: ${INTERSERVICE_API_KEY}
      SPRING_DATASOURCE_URL: ${PRODUCTS_DB_URL:-jdbc:postgresql://postgres-products:5432/${PRODUCTS_DB_NAME:-products}}
      SPRING_DATASOURCE_USERNAME: ${PRODUCTS_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${PRODUCTS_DB_PASS}
      SERVER_PORT: ${PRODUCTS_PORT:-8081}
    depends_on:
      - postgres-products
    ports:
      - "${PRODUCTS_PORT:-8081}:8081"

  inventory-service:
    build: ./inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      API_KEY_INTERNAL: ${INTERSERVICE_API_KEY}
      SPRING_DATASOURCE_URL: ${INVENTORY_DB_URL:-jdbc:postgresql://postgres-inventory:5432/${INVENTORY_DB_NAME:-inventory}}
      SPRING_DATASOURCE_USERNAME: ${INVENTORY_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${INVENTORY_DB_PASS}
      PRODUCTS_BASE_URL: http://products-service:${PRODUCTS_PORT:-8081}
      SERVER_PORT: ${INVENTORY_PORT:-8082}
      HTTP_CLIENT_TIMEOUT_MS: ${HTTP_CLIENT_TIMEOUT_MS:-1500}
      HTTP_CLIENT_MAX_RETRIES: ${HTTP_CLIENT_MAX_RETRIES:-2}
    depends_on:
      - postgres-inventory
      - products-service
    ports:
      - "${INVENTORY_PORT:-8082}:8082"
